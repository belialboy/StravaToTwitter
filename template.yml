# Copyright 2020 Jonathan Jenkyn
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'https://github.com/belialboy/StravaToTwitter/'

###
### Template input parameters
###

Parameters:
  pSSMPrefix:
    Type: String
    Description: If this field is filled, then it is assumed that you've already created the SSM parameters with that prefix, otherwise we'll make SSM parameters using the values you provide in the other fields.
  pTwitterConsumerKey:
    Type: String
    Description: The Twitter Consumer Key (Get this from the Twitter Developer Dashboard)
    Default: "None"
  pTwitterConsumerSecret:
    Type: String
    Description: The Twitter Consumer Secret (Get this from the Twitter Developer Dashboard)
    Default: "None"
  pTwitterAccessTokenKey:
    Type: String
    Description: The Twitter Access Token Key (Get this from the Twitter Developer Dashboard)
    Default: "None"
  pTwitterAccessTokenSecret:
    Type: String
    Description: The Twitter Access Token Secret (Get this from the Twitter Developer Dashboard)
    Default: "None"
  pStravaClientId:
    Type: String
    Description: The Client Id for this application.
    Default: "None"
  pStravaClientSecret:
    Type: String
    Description: The Client Secret for this application
    Default: "None"
  pStravaClubId:
    Type: String
    Description: Leave as blank for individual mode. Set this to the numeric ID for a strava club and all registrations will check for that membership before enrolling and tweets will then contain member names.
    Default: ""

Conditions:
  MakeSSMParams: !Equals [!Ref pSSMPrefix, ""]
  ClubMode: !Not [!Equals [!Ref pStravaClubId, ""]]

###
### Template Resources
###

Resources:

  TwitterConsumerKey:
    Type: AWS::SSM::Parameter
    Condition: MakeSSMParams
    Properties:
      Name: !Sub '{AWS::StackName}TwitterConsumerKey'
      Type: String
      Value: !Ref pTwitterConsumerKey

  TwitterConsumerSecret:
    Type: AWS::SSM::Parameter
    Condition: MakeSSMParams
    Properties:
      Name: !Sub '{AWS::StackName}TwitterConsumerSecret'
      Type: String
      Value: !Ref pTwitterConsumerSecret

  TwitterAccessTokenKey:
    Type: AWS::SSM::Parameter
    Condition: MakeSSMParams
    Properties:
      Name: !Sub '{AWS::StackName}TwitterAccessTokenKey'
      Type: String
      Value: !Ref pTwitterAccessTokenKey
      
  TwitterAccessTokenSecret:
    Type: AWS::SSM::Parameter
    Condition: MakeSSMParams
    Properties:
      Name: !Sub '{AWS::StackName}TwitterAccessTokenSecret'
      Type: String
      Value: !Ref pTwitterAccessTokenSecret

  StravaClientId:
    Type: AWS::SSM::Parameter
    Condition: MakeSSMParams
    Properties:
      Name: !Sub '{AWS::StackName}StravaClientId'
      Type: String
      Value: !Ref pStravaClientId
      
  StravaClientSecret:
    Type: AWS::SSM::Parameter
    Condition: MakeSSMParams
    Properties:
      Name: !Sub '{AWS::StackName}StravaClientSecret'
      Type: String
      Value: !Ref pStravaClientSecret
  
  StravaClubId:
    Type: AWS::SSM::Parameter
    Condition: ClubMode
    Properties:
      Name: !Sub '{AWS::StackName}StravaClubId'
      Type: String
      Value: !Ref pStravaClubId
      
  StravaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layers/strava/src
      CompatibleRuntimes:
        - python3.9

  ProxyLambdaFunction:
    DependsOn: 
    - Totals
    - WebhookASync
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      CodeUri: src/proxy/
      Layers:
      - !Ref StravaLayer
      Environment:
        Variables:
          ssmPrefix: !If [MakeSSMParams,!Ref AWS::StackName,!Ref pSSMPrefix]
          totalsTable: !Ref Totals
          detailsTable: !Ref Details
          webhookASync: !Ref WebhookASync
      Events:
        HttpApiEvent:
          Type: HttpApi
      Policies:
      - Statement:
        - Sid: LambdaInvoke
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: !GetAtt WebhookASync.Arn
        - Sid: DynamoDBAccess
          Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          Resource: 
          - !GetAtt Totals.Arn
          - !GetAtt Details.Arn
        - Sid: SSMAccess
          Effect: Allow
          Action: 
          - ssm:GetParameter
          Resource: 
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${pSSMPrefix}*'
  # Our lambda function

  WebhookASync:
    DependsOn: 
    - Totals
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 600
      Handler: index.lambda_handler
      CodeUri: src/webhook/
      Layers:
      - !Ref StravaLayer
      Environment:
        Variables:
            ssmPrefix: !If [MakeSSMParams,!Ref AWS::StackName,!Ref pSSMPrefix]
            totalsTable: !Ref Totals
            detailsTable: !Ref Details
      Policies:
      - Statement:
        - Sid: DynamoDBAccessTotals
          Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          Resource: 
          - !GetAtt Totals.Arn
        - Sid: DynamoDBAccessDetails
          Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource: 
          - !GetAtt Details.Arn
        - Sid: STSAccess
          Effect: Allow
          Action:
          - sts:GetCallerIdentity
          Resource: "*"
        - Sid: SSMAccess
          Effect: Allow
          Action: 
          - ssm:GetParameter
          Resource: 
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${pSSMPrefix}*'
          
  DailyPostLambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 600
      Handler: index.lambda_handler
      CodeUri: src/daily/
      Layers:
      - !Ref StravaLayer
      Environment:
        Variables:
          ssmPrefix: !If [MakeSSMParams,!Ref AWS::StackName,!Ref pSSMPrefix]
          totalsTable: !Ref Totals
          detailsTable: !Ref Details
      Policies:
      - Statement:
        - Sid: DynamoDBAccess
          Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          Resource: 
          - !GetAtt Totals.Arn
          - !GetAtt Details.Arn
        - Sid: SSMAccess
          Effect: Allow
          Action: 
          - ssm:GetParameter
          Resource: 
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${pSSMPrefix}*'
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(59 23 * * ? *)'
            Name: ScheduleForStravaEOD
            Description: Executes the Strava Daily catalog function
            Enabled: true

  Totals:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Id
          AttributeType: S
      KeySchema: 
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  Details:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: activityId
          AttributeType: N
        - AttributeName: athleteId
          AttributeType: N
        - AttributeName: eventEpoch
          AttributeType: N
      KeySchema: 
        - AttributeName: athleteId
          KeyType: HASH
        - AttributeName: activityId
          KeyType: RANGE
      LocalSecondaryIndexes: 
        - IndexName: "searchForAthleteInTimeRange"
          KeySchema: 
            - AttributeName: athleteId
              KeyType: HASH
            - AttributeName: eventEpoch
              KeyType: RANGE
          Projection: 
            NonKeyAttributes: 
              - activityId
            ProjectionType: "INCLUDE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 30
  
  GetAPIAddressLambda:
    DependsOn: 
    - ProxyLambdaFunction
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 10
      Handler: index.lambda_handler
      CodeUri: src/getapig/
      Environment:
        Variables:
          StackName: !Ref "AWS::StackName"
          Region: !Ref "AWS::Region"
      Policies:
      - Statement:
        - Sid: CloudFormationAccess
          Effect: Allow
          Action:
          - cloudformation:DescribeStackResource
          Resource: !Ref "AWS::StackId"
        
  GetAPIAddress:
    Type: 'Custom::APIAddress'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt GetAPIAddressLambda.Arn
      StackName: !Ref "AWS::StackName"
      
  RegisterWebhookLambda:
    DependsOn: 
    - ProxyLambdaFunction
    - WebhookASync
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.9
      Timeout: 60
      Handler: index.lambda_handler
      CodeUri: src/registerwebhook/
      Environment:
        Variables:
            WebhookLambda: !Ref WebhookASync
            WebhookURL: !GetAtt GetAPIAddress.webhook
            ssmPrefix: !If [MakeSSMParams,!Ref AWS::StackName,!Ref pSSMPrefix]
      Policies:
      - Statement:
        - Sid: LambdaAccess
          Effect: Allow
          Action:
          - lambda:UpdateFunctionConfiguration
          - lambda:GetFunctionConfiguration
          Resource: !GetAtt WebhookASync.Arn
        - Sid: STSAccess
          Effect: Allow
          Action:
          - sts:GetCallerIdentity
          Resource: "*"
        - Sid: SSMAccess
          Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: 
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}*'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${pSSMPrefix}*'
        
  RegisterWebhook:
    Type: 'Custom::RegisterWebhook'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt RegisterWebhookLambda.Arn
      
Outputs:
  RegisterURL:
    Description: This is the URL that users will use to register with you through their Strava account
    Value: !GetAtt GetAPIAddress.register
